{"version":3,"sources":["components/List.js","components/ListContainer.js","components/SearchForm.js","components/SearchFormContainer.js","components/MovieDetail.js","components/MovieDetailContainer.js","pages/detail.js","components/MovieAppContainer.js","shared/App.js","client/Root.js","serviceWorker.js","store/MovieAPI.js","store/store.js","index.js","store/index.js"],"names":["List","_ref","id","title","poster_path","vote_average","react_default","a","createElement","className","react_router_dom","to","concat","src","alt","ListContainer","inject","observer","renderMovieList","movieData","_this","props","store","movieListArr","results","movieList","map","movie","components_List","key","renderSlider","isLoadMovieList","Swiper","slidesPerView","freeMode","spaceBetween","breakpoints","768","getMovieList","this","Component","SearchForm","type","placeholder","SearchFormContainer","components_SearchForm","Background","_ref2","backdrop_path","isShowDetail","movieBgStyle","backgroundImage","style","Title","_ref3","release_date","tagline","split","renderRelease","Genre","_ref4","genres","GenreList","_ref5","genre","genreList","name","MovieDetail","MovieDetail_Background","MovieDetail_Title","MovieDetail_Genre","MovieDetailContainer","movieId","getMovieDetail","movieDetail","components_MovieDetail","Object","assign","detail","params","match","src_components_MovieDetailContainer","path","MovieAppContainer","src_components_SearchFormContainer","react_router","exact","component","App","src_components_MovieAppContainer","Root","basename","process","shared_App","Boolean","window","location","hostname","MovieAPI","NOW_PLAYING","TRENDING","TOP_RATED","UPCOMING","SEARCH","DEFAULT_URL","API_KEY","LANGUAGE_KR","LANGUAGE_EN","configure","enforceActions","root","classCallCheck","initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_descriptor4","flow","regenerator_default","mark","_callee","response","data","wrap","_context","prev","next","axios","get","sent","t0","console","error","stop","bind","_callee2","_context2","isLoadMovieDetail","observable","RootStore","ReactDOM","render","index_module","client_Root","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c120ed27.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst List = ({ id, title, poster_path, vote_average }) => {\r\n    return (\r\n        <div className=\"Movie__List swiper-slide\">\r\n            <Link to={`/detail/${id}`}>\r\n                <div className=\"Poster\"><img src={`http://image.tmdb.org/t/p/w780${poster_path}`} alt={title} /></div>\r\n                <div className=\"Info\">\r\n                    <div className=\"Average\"><span><i className=\"fas fa-star\"></i></span><span>{vote_average}</span></div>\r\n                    <div className=\"Title\"><h3>{title}</h3></div>\r\n                </div>\r\n            </Link>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default List;","import React, { Component } from 'react'\r\nimport { inject, observer } from 'mobx-react';\r\nimport Swiper from 'swiper';\r\nimport List from './List';\r\nimport './swiper-4.5.0.min.css';\r\nimport './ListContainer.css'\r\n\r\n@inject('store')\r\n@observer\r\nclass ListContainer extends Component {\r\n    // constructor() {\r\n    //     super();\r\n    //     this.state = {\r\n    //         virtualData: [],\r\n    //     }\r\n    // }\r\n\r\n    componentDidMount() {\r\n        const { getMovieList } = this.props.store;\r\n        getMovieList();\r\n    }\r\n\r\n    renderMovieList = () => {\r\n        const { movieListArr } = this.props.store;\r\n        const movieData = movieListArr.results;\r\n        if (movieData) {\r\n            const movieList = movieData.map(movie => {\r\n                return (\r\n                    <List \r\n                        id={movie.id} \r\n                        key={movie.id} \r\n                        title={movie.title}\r\n                        poster_path={movie.poster_path}\r\n                        vote_average={movie.vote_average}\r\n                    />\r\n                )\r\n            })\r\n            this.renderSlider();\r\n            return movieList;\r\n        } else {\r\n            return <div className=\"loading\">Loading...</div>\r\n        }\r\n    }\r\n\r\n    renderSlider = () => {\r\n        const { isLoadMovieList } = this.props.store;\r\n        if (isLoadMovieList === 'done') {\r\n            const movieSlider = new Swiper('.Movie__Sl', {// eslint-disable-line\r\n                slidesPerView: 3.5,\r\n                freeMode: true,\r\n                spaceBetween: '5%',\r\n                breakpoints: {\r\n                    768: {\r\n                        slidesPerView: 2.5\r\n                    }\r\n                }\r\n            })\r\n        } else return null;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Movie__List__Container\">\r\n                <div className=\"List__Container swiper-container Movie__Sl\">\r\n                    <div className=\"Type\"><h2>Now Playing</h2></div>\r\n                    <div className=\"swiper-wrapper\">\r\n                        {this.renderMovieList()}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ListContainer;","import React from 'react';\r\n\r\nconst SearchForm = () => {\r\n    return (\r\n        <div className=\"Search__Form\">\r\n            <div className=\"Input__Wrap\">\r\n                <input type=\"text\" placeholder=\"Movie, Acotrs, Directors...\"/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchForm;\r\n","import React, { Component } from 'react'\r\nimport SearchForm from './SearchForm';\r\nimport './SearchFormContainer.css';\r\n\r\n\r\nclass SearchFormContainer extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"Search__Form__Wrapper\">\r\n                <SearchForm />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchFormContainer;\r\n","import React from 'react';\r\n\r\nconst MovieDetail = ({ \r\n    isShowDetail, \r\n    backdrop_path, \r\n    title,\r\n    release_date,\r\n    tagline,\r\n    genres\r\n}) => {\r\n    return (\r\n        <div className=\"Movie__Detail\">\r\n            <Background backdrop_path={backdrop_path} isShowDetail={isShowDetail} />\r\n            <div className=\"Movie__Detail__Inner\">\r\n                <Title title={title} release_date={release_date} tagline={tagline} />\r\n                <Genre genres={genres} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst Background = ({ backdrop_path, isShowDetail }) => {\r\n    const movieBgStyle = {\r\n        backgroundImage: `url(http://image.tmdb.org/t/p/original${backdrop_path})`\r\n    };\r\n\r\n    return (\r\n        <div className=\"Movie__Background\" style={isShowDetail ? movieBgStyle : null} />\r\n    );\r\n};\r\n\r\nconst Title = ({ title, release_date, tagline }) => {\r\n    const renderRelease = () => {\r\n        if (release_date) {\r\n            return release_date.split('-')[0];\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"Title__Wrap\">\r\n            <div className=\"Title\"><h2>{title}</h2></div>\r\n            <div className=\"Released__Date\"><p>{renderRelease()}</p></div>\r\n            <div className=\"Tagline\">{tagline}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Genre = ({ genres }) => {\r\n    const renderGenre = () => {\r\n        if (genres) {\r\n            const genre = genres.map((genreList) => {\r\n                return <GenreList genre={genreList.name} key={genreList.id} />\r\n            });\r\n            return genre;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    const GenreList = ({ genre }) => {\r\n        return <div className=\"Genre__List\"><p>{genre}</p></div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"Genres\">\r\n            {renderGenre()}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MovieDetail;\r\n","import React, { Component } from 'react'\r\nimport MovieDetail from './MovieDetail';\r\nimport { observer, inject } from 'mobx-react';\r\nimport './MovieDetailContainer.css';\r\n\r\n@inject('store')\r\n@observer\r\nclass MovieDetailContainer extends Component {\r\n\r\n    componentDidMount() {\r\n        const { movieId } = this.props;\r\n        const { getMovieDetail } = this.props.store;\r\n        getMovieDetail(movieId);\r\n    }\r\n\r\n    render() {\r\n        const { movieDetail } = this.props.store;\r\n        const { isShowDetail } = this.props;\r\n\r\n        return (\r\n            <div className=\"Movie__Detail__Wrap\">\r\n                <MovieDetail {...movieDetail} isShowDetail={isShowDetail} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MovieDetailContainer;\r\n","import React from 'react';\r\nimport MovieDetailContainer from '../components/MovieDetailContainer';\r\n\r\nconst detail = (params) => {\r\n\r\n    const isShowDetail = () => {\r\n        if (params.match.path === '/detail/:movieId') {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    const movieId = params.match.params.movieId;\r\n\r\n    return (\r\n        <MovieDetailContainer movieId={movieId} isShowDetail={isShowDetail()} />\r\n    )\r\n}\r\n\r\nexport default detail;\r\n","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport ListContainer from './ListContainer';\r\nimport SearchFormContainer from './SearchFormContainer';\r\nimport { detail } from '../pages';\r\nimport './MovieAppContainer.css';\r\n\r\nconst MovieAppContainer = () => {\r\n    return (\r\n        <div className=\"MovieApp\">\r\n            <div className=\"MovieApp__Container\">\r\n                <SearchFormContainer />\r\n                <Switch>\r\n                    <Route exact path='/' component={ListContainer} />\r\n                    <Route path='/detail/:movieId' component={detail} />\r\n                </Switch>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MovieAppContainer;\r\n","import React, { Component } from 'react';\r\nimport '../App.css';\r\nimport MovieAppContainer from '../components/MovieAppContainer';\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <MovieAppContainer />\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport App from '../shared/App';\r\n\r\nconst Root = () => (\r\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n        <App />\r\n    </BrowserRouter>\r\n);\r\n\r\nexport default Root;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","const MovieAPI = {\r\n    NOW_PLAYING: '/movie/now_playing',\r\n    TRENDING: '/trending/movie/week',\r\n    TOP_RATED: '/movie/top_rated',\r\n    UPCOMING: '/movie/upcoming',\r\n    // searchKeyword: '&query=' + this.searchWordFix,\r\n\r\n    SEARCH: '/search/movie',\r\n    DEFAULT_URL: 'https://api.themoviedb.org/3',\r\n    API_KEY: '?api_key=dc11dbd0605b4d60cc66ce5e8363e063',\r\n    LANGUAGE_KR: '&language=ko-KR',\r\n    LANGUAGE_EN: '&language=en-US',\r\n}\r\nexport default MovieAPI;","import { observable, flow, configure, action } from 'mobx';\r\nimport MovieAPI from './MovieAPI';\r\nimport axios from 'axios';\r\n\r\nconfigure({ enforceActions: 'observed' });\r\n\r\nexport default class store {\r\n    constructor(root) {\r\n        this.root = root;\r\n    }\r\n\r\n    @observable isLoadMovieList = 'pending';\r\n    @observable movieListArr = [];\r\n\r\n    @observable isLoadMovieDetail = 'pending';\r\n    @observable movieDetail = [];\r\n\r\n    getMovieList = flow(function*() {\r\n        try {\r\n            const response = yield axios.get(\r\n                MovieAPI.DEFAULT_URL \r\n                + MovieAPI.NOW_PLAYING \r\n                + MovieAPI.API_KEY \r\n                + MovieAPI.LANGUAGE_EN\r\n            )\r\n            const data = response.data;\r\n            yield this.movieListArr = data;\r\n            this.isLoadMovieList = 'done';\r\n            // console.log(this.movieListArr);\r\n        } catch (error) {\r\n            console.error(error);\r\n            this.isLoadMovieList = 'error';\r\n        }\r\n    });\r\n    getMovieList = this.getMovieList.bind(this);\r\n\r\n    getMovieDetail = flow(function* (movieId) {\r\n        try {\r\n            const response = yield axios.get(\r\n                MovieAPI.DEFAULT_URL+'/movie/'+movieId\r\n                + MovieAPI.API_KEY\r\n                + MovieAPI.LANGUAGE_EN\r\n            );\r\n            const data = response.data;\r\n            this.movieDetail = data;\r\n            this.isLoadMovieDetail = 'done';\r\n        }\r\n        catch (error) {\r\n            console.error(error);\r\n            this.isLoadMovieDetail = 'error';\r\n        }\r\n    });\r\n    getMovieDetail = this.getMovieDetail.bind(this);\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Root from './client/Root';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'mobx-react';\nimport RootStore from '././store';\n\nconst root = new RootStore();\n\nReactDOM.render(\n    <Provider {...root}>\n        <Root />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import store from './store';\r\n\r\nclass RootStore {\r\n    constructor() {\r\n        this.store = new store(this);\r\n    }\r\n}\r\n\r\nexport default RootStore;"],"sourceRoot":""}